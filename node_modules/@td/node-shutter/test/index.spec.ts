import Shutter from '../src/index';
import * as fs from 'fs';
import * as path from 'path';

describe('index', () => {
  it('should provide Shutter', () => {
    expect(Shutter).not.toBeUndefined();
  });

  const shutter = new Shutter({
    hostList: '10.57.17.39:8188',
    application: 'osiris',
    group: 'DEFAULT_GROUP',
    environment: 'dev',
    scanPackage: 'cn.fraudmetrix.osiris',
    SecretKey: 'SecretKey',
    AccessKey: 'AccessKey'
  });
  const properties = shutter.getProperties();

  it('can add properties', () => {
    shutter.addProperties('osiris', ['osiris.properties']);
    expect(properties.length).toEqual(1);
    shutter.addProperties('jdbc', ['jdbc.osiris.properties']);
    expect(properties[properties.length - 1].getApp()).toEqual('jdbc');
    shutter.addProperties('codis', ['codis.super.properties', 'codis.session.properties']);
    expect(properties[properties.length - 1].getApp()).toEqual('codis');
  });

  it('read properties text', done => {
    shutter.fetchRemoteData().then(result => {
      if (result) {
        expect(properties[2].getProperty('codis.super.proxy')).toEqual('tongdun_codis_test');
        expect(properties[2].getProperty('codis.session.password')).toEqual('tongdun123');
        expect(properties[0].getProperty('gleaner.keyspace')).toEqual('gleaner');
        done();
      }
    });
  });

  it('can cache properties', () => {
    jest.setTimeout(2000);
    expect(fs.existsSync(path.resolve(process.cwd(), '../output/', 'osiris~osiris~osiris.properties'))).toEqual(true);
    expect(fs.existsSync(path.resolve(process.cwd(), '../output/', 'osiris~jdbc~jdbc.osiris.properties'))).toEqual(true);
    expect(fs.existsSync(path.resolve(process.cwd(), '../output/', 'osiris~codis~codis.super.properties'))).toEqual(true);
    expect(fs.existsSync(path.resolve(process.cwd(), '../output/', 'osiris~codis~codis.session.properties'))).toEqual(true);
  });

});