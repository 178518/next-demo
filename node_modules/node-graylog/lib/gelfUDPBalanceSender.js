"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var dgram = require("dgram");
var genericPool = require("generic-pool");
var gelfMessageFactory_1 = require("./gelfMessageFactory");
var node_fetch_1 = require("node-fetch");
var uid = require("uid-safe");
var format = require('format');
var MAX_SIZE = 1420;
function shouldOutput(level, max) {
    return gelfMessageFactory_1.LEVEL_MAPPING[level.toUpperCase()] <= gelfMessageFactory_1.LEVEL_MAPPING[max.toUpperCase()];
}
function generateMessageId() {
    return uid.sync(6);
}
var GelfUDPBalanceSender = /** @class */ (function () {
    function GelfUDPBalanceSender(options) {
        var _this = this;
        this.options = options;
        if (this.options.console === undefined) {
            this.options.console = true;
        }
        this.gelfMessageFactory = new gelfMessageFactory_1.default(options);
        // 线程池，最少2个最多10个实例;
        this.factory = {
            create: function () { return new Promise(function (resolve, reject) {
                var client = dgram.createSocket('udp4');
                client.on('error', function (err) {
                    console.log("error, msg - " + err.message + ", stack - \n" + err.stack);
                    reject();
                });
                resolve(client);
            }); },
            destroy: function (client) { return new Promise(function (resolve) {
                client.on('close', function () {
                    resolve();
                });
                client.close();
            }); }
        };
        this.pool = genericPool.createPool(this.factory, Object.assign({ max: 10, min: 2 }, this.options.pool));
        this.aliveNodes = [];
        this.aliveUrl = "http://" + this.options.graylogHost + ":" + this.options.graylogPort + "/api/lb/keep_alive";
        this.polling();
        this.keepAlive();
        process.on('exit', function () { return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.pool.drain()];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, this.pool.clear()];
                    case 2:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        }); });
    }
    GelfUDPBalanceSender.prototype.polling = function () {
        return __awaiter(this, void 0, void 0, function () {
            var result, e_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 3, , 4]);
                        if (this.aliveNodes.length) {
                            return [2 /*return*/, true];
                        }
                        if (!!this.version) return [3 /*break*/, 2];
                        return [4 /*yield*/, node_fetch_1.default(this.aliveUrl + "?app=" + this.options.app).then(function (res) { return res.json(); })];
                    case 1:
                        result = _a.sent();
                        if (result.success) {
                            this.version = result.version || 0;
                            if (result.state && result.state.upstream_list) {
                                this.aliveNodes = result.state.upstream_list.filter(function (item) { return item.alive; }).map(function (item) {
                                    var _a = item.upstream.split(':'), host = _a[0], port = _a[1];
                                    return { host: host, port: port };
                                }) || [];
                                return [2 /*return*/, !!this.aliveNodes.length];
                            }
                        }
                        _a.label = 2;
                    case 2: return [3 /*break*/, 4];
                    case 3:
                        e_1 = _a.sent();
                        console.log(e_1);
                        return [3 /*break*/, 4];
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    GelfUDPBalanceSender.prototype.keepAlive = function () {
        return __awaiter(this, void 0, void 0, function () {
            var result, e_2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.version) {
                            return [2 /*return*/];
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, node_fetch_1.default(this.aliveUrl + "?version=" + this.version + "&app=" + this.options.app).then(function (res) { return res.json(); })];
                    case 2:
                        result = _a.sent();
                        if (result.success && result.changed) {
                            this.version = result.version || this.version;
                            if (result.state && result.state.upstream_list) {
                                this.aliveNodes = result.state.upstream_list.filter(function (item) { return item.alive; }).map(function (item) {
                                    var _a = item.upstream.split(':'), host = _a[0], port = _a[1];
                                    return { host: host, port: port };
                                }) || [];
                            }
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        e_2 = _a.sent();
                        console.log('node_graylog keep_alive', e_2);
                        return [3 /*break*/, 4];
                    case 4:
                        setTimeout(this.keepAlive.bind(this), 5000);
                        return [2 /*return*/];
                }
            });
        });
    };
    GelfUDPBalanceSender.prototype.sendMessage = function (msg, level) {
        var args = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            args[_i - 2] = arguments[_i];
        }
        return __awaiter(this, void 0, void 0, function () {
            var message, flag, isReady, host_1, port_1, index, client_1, gelfMessage, chunksCount, messageId, byteOffset, promises, _loop_1, i, e_3, e_4;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 9, , 10]);
                        message = format.apply(void 0, [msg.stack ? msg.stack : msg].concat(args));
                        flag = shouldOutput(level, this.options.level);
                        if (this.options.console && flag) {
                            console.log(message);
                        }
                        return [4 /*yield*/, this.polling()];
                    case 1:
                        isReady = _a.sent();
                        if (!this.aliveNodes.length || !isReady) {
                            host_1 = this.options.graylogHost;
                            port_1 = this.options.graylogPort;
                        }
                        else {
                            index = this.aliveNodes.length > 1 ? (Math.floor(Math.random() * this.aliveNodes.length)) : 0;
                            host_1 = this.aliveNodes[index].host;
                            port_1 = this.aliveNodes[index].port;
                        }
                        if (!flag) {
                            return [2 /*return*/];
                        }
                        return [4 /*yield*/, this.pool.acquire()];
                    case 2:
                        client_1 = _a.sent();
                        gelfMessage = new Buffer(this.gelfMessageFactory.createGelfMessage(message, level));
                        if (!(gelfMessage.length <= MAX_SIZE)) return [3 /*break*/, 3];
                        client_1.send(gelfMessage, 0, gelfMessage.length, port_1, host_1, function (err) {
                            if (err) {
                                console.log(err);
                                _this.pool.destroy(client_1);
                                return;
                            }
                            _this.pool.release(client_1);
                        });
                        return [3 /*break*/, 8];
                    case 3:
                        chunksCount = Math.ceil(gelfMessage.length / MAX_SIZE);
                        if (chunksCount > 128) {
                            chunksCount = 128;
                        }
                        messageId = generateMessageId();
                        byteOffset = 0;
                        promises = [];
                        _loop_1 = function (i) {
                            var chunkBytes = (byteOffset + MAX_SIZE) < gelfMessage.length ? MAX_SIZE : (gelfMessage.length - byteOffset);
                            var chunk = new Buffer(chunkBytes + 12);
                            chunk[0] = 0x1e;
                            chunk[1] = 0x0f;
                            chunk.write(messageId, 2, 8, 'ascii');
                            chunk[10] = i;
                            chunk[11] = chunksCount;
                            gelfMessage.copy(chunk, 12, byteOffset, byteOffset + chunkBytes);
                            byteOffset += chunkBytes;
                            promises.push(new Promise(function (resolve, reject) {
                                client_1.send(chunk, 0, chunk.length, port_1, host_1, function (err) {
                                    if (err) {
                                        console.log(err);
                                        reject(err);
                                    }
                                    resolve();
                                });
                            }));
                        };
                        for (i = 0; i < chunksCount; i++) {
                            _loop_1(i);
                        }
                        _a.label = 4;
                    case 4:
                        _a.trys.push([4, 6, , 7]);
                        return [4 /*yield*/, Promise.all(promises)];
                    case 5:
                        _a.sent();
                        return [3 /*break*/, 7];
                    case 6:
                        e_3 = _a.sent();
                        this.pool.destroy(client_1);
                        return [2 /*return*/];
                    case 7:
                        this.pool.release(client_1);
                        _a.label = 8;
                    case 8: return [3 /*break*/, 10];
                    case 9:
                        e_4 = _a.sent();
                        console.log(e_4);
                        return [3 /*break*/, 10];
                    case 10: return [2 /*return*/];
                }
            });
        });
    };
    return GelfUDPBalanceSender;
}());
exports.default = GelfUDPBalanceSender;
//# sourceMappingURL=data:application/json;base64,