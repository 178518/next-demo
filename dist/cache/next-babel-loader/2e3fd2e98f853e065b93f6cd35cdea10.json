{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/yun.zhao/workspace/with-polyfills/pages/index/index.jsx\";\n\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport dynamic from 'next/dynamic'; // import getConfig from 'next/config';\n\nimport Loading from \"../../components/loading\";\nimport SystemConfig from 'uiconfigdata/systemConfig';\nimport devTempPage from 'uiconfigdata/indexConfig.json'; // Only holds serverRuntimeConfig and publicRuntimeConfig from next.config.js nothing else.\n\n/*const { serverRuntimeConfig, publicRuntimeConfig } = getConfig();\n\nconsole.log(serverRuntimeConfig.mySecret); // Will only be available on the server side\nconsole.log(publicRuntimeConfig.staticFolder); // Will be available on both server and client\n\nconsole.log(process.env.NODE_ENV);*/\n\n/**\n * 解决 Warning: Expected server HTML to contain a matching <p> in <div>\n * https://stackoverflow.com/questions/53139884/next-js-disable-server-side-rendering-on-some-pages\n * @type {DynamicComponent<{}>}\n */\n\nvar DynamicIndexPc = dynamic(_c = function _c() {\n  return import(\"./index_pc\");\n}, {\n  ssr: true,\n  loading: function loading() {\n    return __jsx(Loading, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 20\n      }\n    });\n  },\n  loadableGenerated: {\n    webpack: function webpack() {\n      return [require.resolveWeak(\"./index_pc\")];\n    },\n    modules: [\"./index_pc\"]\n  }\n});\n_c2 = DynamicIndexPc;\nvar DynamicIndexMobile = dynamic(_c3 = function _c3() {\n  return import(\"./index_mobile\");\n}, {\n  ssr: true,\n  loading: function loading() {\n    return __jsx(Loading, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 20\n      }\n    });\n  },\n  loadableGenerated: {\n    webpack: function webpack() {\n      return [require.resolveWeak(\"./index_mobile\")];\n    },\n    modules: [\"./index_mobile\"]\n  }\n});\n_c4 = DynamicIndexMobile;\n\nvar Index = /*#__PURE__*/function (_Component) {\n  _inherits(Index, _Component);\n\n  var _super = _createSuper(Index);\n\n  function Index() {\n    _classCallCheck(this, Index);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(Index, [{\n    key: \"render\",\n    value: function render() {\n      var isMobile = this.props.isMobile;\n      return __jsx(DynamicIndexPc, _extends({}, this.props, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 12\n        }\n      }));\n      /**\n       * 相当于merge，和document只能存一\n       * */\n      // return (isMobile ? <DynamicIndexMobile {...this.props} /> : <DynamicIndexPc {...this.props} />);\n    }\n  }], [{\n    key: \"getInitialProps\",\n\n    /**\n     * 只有服务端用到的模块放在getInitialProps里，请确保正确的导入了它们，否则会拖慢你的应用速度。\n     * 这个函数只有app.js和pages下的页面组件有，普通组件没有\n     *\n     * @param pathname URL 的 path 部分\n     * @param query URL 的 query 部分，并被解析成对象\n     * @param asPath 显示在浏览器中的实际路径（包含查询部分），为String类型\n     * @param req HTTP 请求对象 (只有服务器端有)\n     * @param res HTTP 返回对象 (只有服务器端有)\n     * @param json PageRes 获取数据响应对象 (只有客户端有)\n     * @param err 渲染过程中的任何错误\n     * @returns {Promise<{securityJson: *, json: *, userAgent: string}>}\n     */\n    value: function () {\n      var _getInitialProps = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref) {\n        var req, res, pathname, query, asPath, jsonPageRes, err, userAgent, pageJson, envDev, type, proxyUserName, proxyPassword, proxyIp, proxyPort, jsonVersion, HttpProxyAgent, options, tempPage;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                req = _ref.req, res = _ref.res, pathname = _ref.pathname, query = _ref.query, asPath = _ref.asPath, jsonPageRes = _ref.jsonPageRes, err = _ref.err;\n                userAgent = req ? req.headers['user-agent'] : navigator.userAgent;\n                pageJson = '';\n\n                if (!req) {\n                  _context.next = 20;\n                  break;\n                }\n\n                envDev = query.envDev;\n                type = query.type;\n                proxyUserName = query.proxyUserName;\n                proxyPassword = query.proxyPassword;\n                proxyIp = query.proxyIp;\n                proxyPort = query.proxyPort;\n                jsonVersion = query.jsonVersion;\n                HttpProxyAgent = require('http-proxy-agent');\n                options = {\n                  timeout: 3000\n                };\n\n                if (!envDev) {\n                  options.agent = new HttpProxyAgent(\"\".concat(type, \"://\").concat(proxyUserName, \":\").concat(proxyPassword, \"@\").concat(proxyIp, \":\").concat(proxyPort));\n                }\n\n                _context.next = 16;\n                return fetch(\"\".concat(SystemConfig.preludeJsonPath, \"/\").concat(jsonVersion, \"/indexConfig.json\"), options);\n\n              case 16:\n                tempPage = _context.sent;\n                _context.next = 19;\n                return tempPage.json();\n\n              case 19:\n                pageJson = _context.sent;\n\n              case 20:\n                return _context.abrupt(\"return\", {\n                  userAgent: userAgent,\n                  pageJson: pageJson\n                });\n\n              case 21:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function getInitialProps(_x) {\n        return _getInitialProps.apply(this, arguments);\n      }\n\n      return getInitialProps;\n    }()\n  }]);\n\n  return Index;\n}(Component);\n\nexport { Index as default };\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"DynamicIndexPc$dynamic\");\n$RefreshReg$(_c2, \"DynamicIndexPc\");\n$RefreshReg$(_c3, \"DynamicIndexMobile$dynamic\");\n$RefreshReg$(_c4, \"DynamicIndexMobile\");","map":{"version":3,"sources":["/Users/yun.zhao/workspace/with-polyfills/pages/index/index.jsx"],"names":["React","Component","dynamic","Loading","SystemConfig","devTempPage","DynamicIndexPc","ssr","loading","DynamicIndexMobile","Index","isMobile","props","req","res","pathname","query","asPath","jsonPageRes","err","userAgent","headers","navigator","pageJson","envDev","type","proxyUserName","proxyPassword","proxyIp","proxyPort","jsonVersion","HttpProxyAgent","require","options","timeout","agent","fetch","preludeJsonPath","tempPage","json"],"mappings":";;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,OAAP,MAAoB,cAApB,C,CACA;;AACA,OAAOC,OAAP;AACA,OAAOC,YAAP,MAAyB,2BAAzB;AACA,OAAOC,WAAP,MAAwB,+BAAxB,C,CACA;;AACA;;;;;;;AAOA;;;;;;AAKA,IAAMC,cAAc,GAAGJ,OAAO;AAAA,SAC5B,oBAD4B;AAAA,GAE5B;AACEK,EAAAA,GAAG,EAAE,IADP;AAEEC,EAAAA,OAAO,EAAE;AAAA,WAAM,MAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAN;AAAA,GAFX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAF4B,CAA9B;MAAMF,c;AAQN,IAAMG,kBAAkB,GAAGP,OAAO;AAAA,SAChC,wBADgC;AAAA,GAEhC;AACEK,EAAAA,GAAG,EAAE,IADP;AAEEC,EAAAA,OAAO,EAAE;AAAA,WAAM,MAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAN;AAAA,GAFX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAFgC,CAAlC;MAAMC,kB;;IAQeC,K;;;;;;;;;;;;;6BA2CV;AAAA,UACCC,QADD,GACc,KAAKC,KADnB,CACCD,QADD;AAEP,aAAO,MAAC,cAAD,eAAoB,KAAKC,KAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAP;AACA;;;AAGA;AACD;;;;AAjDD;;;;;;;;;;;;;;;;;;;;AAa+BC,gBAAAA,G,QAAAA,G,EAAKC,G,QAAAA,G,EAAKC,Q,QAAAA,Q,EAAUC,K,QAAAA,K,EAAOC,M,QAAAA,M,EAAQC,W,QAAAA,W,EAAaC,G,QAAAA,G;AACvEC,gBAAAA,S,GAAYP,GAAG,GAAGA,GAAG,CAACQ,OAAJ,CAAY,YAAZ,CAAH,GAA+BC,SAAS,CAACF,S;AAE1DG,gBAAAA,Q,GAAW,E;;qBACXV,G;;;;;AACIW,gBAAAA,M,GAASR,KAAK,CAACQ,M;AACfC,gBAAAA,I,GAAOT,KAAK,CAACS,I;AACbC,gBAAAA,a,GAAgBV,KAAK,CAACU,a;AACtBC,gBAAAA,a,GAAgBX,KAAK,CAACW,a;AACtBC,gBAAAA,O,GAAUZ,KAAK,CAACY,O;AAChBC,gBAAAA,S,GAAYb,KAAK,CAACa,S;AAClBC,gBAAAA,W,GAAcd,KAAK,CAACc,W;AAEpBC,gBAAAA,c,GAAiBC,OAAO,CAAC,kBAAD,C;AACxBC,gBAAAA,O,GAAU;AACdC,kBAAAA,OAAO,EAAE;AADK,iB;;AAIhB,oBAAI,CAACV,MAAL,EAAa;AACXS,kBAAAA,OAAO,CAACE,KAAR,GAAgB,IAAIJ,cAAJ,WAAsBN,IAAtB,gBAAgCC,aAAhC,cAAiDC,aAAjD,cAAkEC,OAAlE,cAA6EC,SAA7E,EAAhB;AACD;;;uBAEsBO,KAAK,WAAIhC,YAAY,CAACiC,eAAjB,cAAoCP,WAApC,wBAAoEG,OAApE,C;;;AAAtBK,gBAAAA,Q;;uBACWA,QAAQ,CAACC,IAAT,E;;;AAAjBhB,gBAAAA,Q;;;iDAGK;AAAEH,kBAAAA,SAAS,EAATA,SAAF;AAAaG,kBAAAA,QAAQ,EAARA;AAAb,iB;;;;;;;;;;;;;;;;;;;EAxCwBtB,S;;SAAdS,K","sourcesContent":["import React, { Component } from 'react';\nimport dynamic from 'next/dynamic';\n// import getConfig from 'next/config';\nimport Loading from 'components/loading';\nimport SystemConfig from 'uiconfigdata/systemConfig';\nimport devTempPage from 'uiconfigdata/indexConfig.json';\n// Only holds serverRuntimeConfig and publicRuntimeConfig from next.config.js nothing else.\n/*const { serverRuntimeConfig, publicRuntimeConfig } = getConfig();\n\nconsole.log(serverRuntimeConfig.mySecret); // Will only be available on the server side\nconsole.log(publicRuntimeConfig.staticFolder); // Will be available on both server and client\n\nconsole.log(process.env.NODE_ENV);*/\n\n/**\n * 解决 Warning: Expected server HTML to contain a matching <p> in <div>\n * https://stackoverflow.com/questions/53139884/next-js-disable-server-side-rendering-on-some-pages\n * @type {DynamicComponent<{}>}\n */\nconst DynamicIndexPc = dynamic(\n  import('./index_pc'),\n  {\n    ssr: true,\n    loading: () => <Loading />,\n  },\n);\n\nconst DynamicIndexMobile = dynamic(\n  import('./index_mobile'),\n  {\n    ssr: true,\n    loading: () => <Loading />,\n  },\n);\n\nexport default class Index extends Component {\n  /**\n   * 只有服务端用到的模块放在getInitialProps里，请确保正确的导入了它们，否则会拖慢你的应用速度。\n   * 这个函数只有app.js和pages下的页面组件有，普通组件没有\n   *\n   * @param pathname URL 的 path 部分\n   * @param query URL 的 query 部分，并被解析成对象\n   * @param asPath 显示在浏览器中的实际路径（包含查询部分），为String类型\n   * @param req HTTP 请求对象 (只有服务器端有)\n   * @param res HTTP 返回对象 (只有服务器端有)\n   * @param json PageRes 获取数据响应对象 (只有客户端有)\n   * @param err 渲染过程中的任何错误\n   * @returns {Promise<{securityJson: *, json: *, userAgent: string}>}\n   */\n  static async getInitialProps({ req, res, pathname, query, asPath, jsonPageRes, err }) {\n    const userAgent = req ? req.headers['user-agent'] : navigator.userAgent;\n\n    let pageJson = '';\n    if (req) {\n      const envDev = query.envDev;\n      const type = query.type;\n      const proxyUserName = query.proxyUserName;\n      const proxyPassword = query.proxyPassword;\n      const proxyIp = query.proxyIp;\n      const proxyPort = query.proxyPort;\n      const jsonVersion = query.jsonVersion;\n\n      const HttpProxyAgent = require('http-proxy-agent');\n      const options = {\n        timeout: 3000,\n      };\n\n      if (!envDev) {\n        options.agent = new HttpProxyAgent(`${type}://${proxyUserName}:${proxyPassword}@${proxyIp}:${proxyPort}`);\n      }\n\n      const tempPage = await fetch(`${SystemConfig.preludeJsonPath}/${jsonVersion}/indexConfig.json`, options);\n      pageJson = await tempPage.json();\n    }\n\n    return { userAgent, pageJson };\n  }\n\n  render() {\n    const { isMobile } = this.props;\n    return <DynamicIndexPc {...this.props} />;\n    /**\n     * 相当于merge，和document只能存一\n     * */\n    // return (isMobile ? <DynamicIndexMobile {...this.props} /> : <DynamicIndexPc {...this.props} />);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}