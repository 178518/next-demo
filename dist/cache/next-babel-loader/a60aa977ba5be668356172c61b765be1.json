{"ast":null,"code":"var _jsxFileName = \"/Users/yun.zhao/workspace/with-polyfills/pages/index/index.jsx\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React, { Component } from 'react';\nimport dynamic from 'next/dynamic'; // import getConfig from 'next/config';\n\nimport Loading from \"../../components/loading\";\nimport SystemConfig from 'uiconfigdata/systemConfig';\nimport devTempPage from 'uiconfigdata/indexConfig.json'; // Only holds serverRuntimeConfig and publicRuntimeConfig from next.config.js nothing else.\n\n/*const { serverRuntimeConfig, publicRuntimeConfig } = getConfig();\n\nconsole.log(serverRuntimeConfig.mySecret); // Will only be available on the server side\nconsole.log(publicRuntimeConfig.staticFolder); // Will be available on both server and client\n\nconsole.log(process.env.NODE_ENV);*/\n\n/**\n * 解决 Warning: Expected server HTML to contain a matching <p> in <div>\n * https://stackoverflow.com/questions/53139884/next-js-disable-server-side-rendering-on-some-pages\n * @type {DynamicComponent<{}>}\n */\n\nconst DynamicIndexPc = dynamic(() => import(\"./index_pc\"), {\n  ssr: true,\n  loading: () => __jsx(Loading, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 20\n    }\n  }),\n  loadableGenerated: {\n    webpack: () => [require.resolveWeak(\"./index_pc\")],\n    modules: [\"./index_pc\"]\n  }\n});\nconst DynamicIndexMobile = dynamic(() => import(\"./index_mobile\"), {\n  ssr: true,\n  loading: () => __jsx(Loading, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 20\n    }\n  }),\n  loadableGenerated: {\n    webpack: () => [require.resolveWeak(\"./index_mobile\")],\n    modules: [\"./index_mobile\"]\n  }\n});\nexport default class Index extends Component {\n  /**\n   * 只有服务端用到的模块放在getInitialProps里，请确保正确的导入了它们，否则会拖慢你的应用速度。\n   * 这个函数只有app.js和pages下的页面组件有，普通组件没有\n   *\n   * @param pathname URL 的 path 部分\n   * @param query URL 的 query 部分，并被解析成对象\n   * @param asPath 显示在浏览器中的实际路径（包含查询部分），为String类型\n   * @param req HTTP 请求对象 (只有服务器端有)\n   * @param res HTTP 返回对象 (只有服务器端有)\n   * @param json PageRes 获取数据响应对象 (只有客户端有)\n   * @param err 渲染过程中的任何错误\n   * @returns {Promise<{securityJson: *, json: *, userAgent: string}>}\n   */\n  static async getInitialProps({\n    req,\n    res,\n    pathname,\n    query,\n    asPath,\n    jsonPageRes,\n    err\n  }) {\n    const userAgent = req ? req.headers['user-agent'] : navigator.userAgent;\n    let pageJson = '';\n\n    if (req) {\n      const envDev = query.envDev;\n      const type = query.type;\n      const proxyUserName = query.proxyUserName;\n      const proxyPassword = query.proxyPassword;\n      const proxyIp = query.proxyIp;\n      const proxyPort = query.proxyPort;\n      const jsonVersion = query.jsonVersion;\n\n      const HttpProxyAgent = require('http-proxy-agent');\n\n      const options = {\n        timeout: 3000\n      };\n\n      if (!envDev) {\n        options.agent = new HttpProxyAgent(`${type}://${proxyUserName}:${proxyPassword}@${proxyIp}:${proxyPort}`);\n      }\n\n      const tempPage = await fetch(`${SystemConfig.preludeJsonPath}/${jsonVersion}/indexConfig.json`, options);\n      pageJson = await tempPage.json();\n    }\n\n    return {\n      userAgent,\n      pageJson\n    };\n  }\n\n  render() {\n    const {\n      isMobile\n    } = this.props;\n    return __jsx(DynamicIndexPc, _extends({}, this.props, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 12\n      }\n    }));\n    /**\n     * 相当于merge，和document只能存一\n     * */\n    // return (isMobile ? <DynamicIndexMobile {...this.props} /> : <DynamicIndexPc {...this.props} />);\n  }\n\n}","map":{"version":3,"sources":["/Users/yun.zhao/workspace/with-polyfills/pages/index/index.jsx"],"names":["React","Component","dynamic","Loading","SystemConfig","devTempPage","DynamicIndexPc","ssr","loading","DynamicIndexMobile","Index","getInitialProps","req","res","pathname","query","asPath","jsonPageRes","err","userAgent","headers","navigator","pageJson","envDev","type","proxyUserName","proxyPassword","proxyIp","proxyPort","jsonVersion","HttpProxyAgent","require","options","timeout","agent","tempPage","fetch","preludeJsonPath","json","render","isMobile","props"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,OAAP,MAAoB,cAApB,C,CACA;;AACA,OAAOC,OAAP;AACA,OAAOC,YAAP,MAAyB,2BAAzB;AACA,OAAOC,WAAP,MAAwB,+BAAxB,C,CACA;;AACA;;;;;;;AAOA;;;;;;AAKA,MAAMC,cAAc,GAAGJ,OAAO,OAC5B,oBAD4B,EAE5B;AACEK,EAAAA,GAAG,EAAE,IADP;AAEEC,EAAAA,OAAO,EAAE,MAAM,MAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFjB;AAAA;AAAA;AAAA;AAAA;AAAA,CAF4B,CAA9B;AAQA,MAAMC,kBAAkB,GAAGP,OAAO,OAChC,wBADgC,EAEhC;AACEK,EAAAA,GAAG,EAAE,IADP;AAEEC,EAAAA,OAAO,EAAE,MAAM,MAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFjB;AAAA;AAAA;AAAA;AAAA;AAAA,CAFgC,CAAlC;AAQA,eAAe,MAAME,KAAN,SAAoBT,SAApB,CAA8B;AAC3C;;;;;;;;;;;;;AAaA,eAAaU,eAAb,CAA6B;AAAEC,IAAAA,GAAF;AAAOC,IAAAA,GAAP;AAAYC,IAAAA,QAAZ;AAAsBC,IAAAA,KAAtB;AAA6BC,IAAAA,MAA7B;AAAqCC,IAAAA,WAArC;AAAkDC,IAAAA;AAAlD,GAA7B,EAAsF;AACpF,UAAMC,SAAS,GAAGP,GAAG,GAAGA,GAAG,CAACQ,OAAJ,CAAY,YAAZ,CAAH,GAA+BC,SAAS,CAACF,SAA9D;AAEA,QAAIG,QAAQ,GAAG,EAAf;;AACA,QAAIV,GAAJ,EAAS;AACP,YAAMW,MAAM,GAAGR,KAAK,CAACQ,MAArB;AACA,YAAMC,IAAI,GAAGT,KAAK,CAACS,IAAnB;AACA,YAAMC,aAAa,GAAGV,KAAK,CAACU,aAA5B;AACA,YAAMC,aAAa,GAAGX,KAAK,CAACW,aAA5B;AACA,YAAMC,OAAO,GAAGZ,KAAK,CAACY,OAAtB;AACA,YAAMC,SAAS,GAAGb,KAAK,CAACa,SAAxB;AACA,YAAMC,WAAW,GAAGd,KAAK,CAACc,WAA1B;;AAEA,YAAMC,cAAc,GAAGC,OAAO,CAAC,kBAAD,CAA9B;;AACA,YAAMC,OAAO,GAAG;AACdC,QAAAA,OAAO,EAAE;AADK,OAAhB;;AAIA,UAAI,CAACV,MAAL,EAAa;AACXS,QAAAA,OAAO,CAACE,KAAR,GAAgB,IAAIJ,cAAJ,CAAoB,GAAEN,IAAK,MAAKC,aAAc,IAAGC,aAAc,IAAGC,OAAQ,IAAGC,SAAU,EAAvF,CAAhB;AACD;;AAED,YAAMO,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEhC,YAAY,CAACiC,eAAgB,IAAGR,WAAY,mBAAhD,EAAoEG,OAApE,CAA5B;AACAV,MAAAA,QAAQ,GAAG,MAAMa,QAAQ,CAACG,IAAT,EAAjB;AACD;;AAED,WAAO;AAAEnB,MAAAA,SAAF;AAAaG,MAAAA;AAAb,KAAP;AACD;;AAEDiB,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEC,MAAAA;AAAF,QAAe,KAAKC,KAA1B;AACA,WAAO,MAAC,cAAD,eAAoB,KAAKA,KAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAP;AACA;;;AAGA;AACD;;AAlD0C","sourcesContent":["import React, { Component } from 'react';\nimport dynamic from 'next/dynamic';\n// import getConfig from 'next/config';\nimport Loading from 'components/loading';\nimport SystemConfig from 'uiconfigdata/systemConfig';\nimport devTempPage from 'uiconfigdata/indexConfig.json';\n// Only holds serverRuntimeConfig and publicRuntimeConfig from next.config.js nothing else.\n/*const { serverRuntimeConfig, publicRuntimeConfig } = getConfig();\n\nconsole.log(serverRuntimeConfig.mySecret); // Will only be available on the server side\nconsole.log(publicRuntimeConfig.staticFolder); // Will be available on both server and client\n\nconsole.log(process.env.NODE_ENV);*/\n\n/**\n * 解决 Warning: Expected server HTML to contain a matching <p> in <div>\n * https://stackoverflow.com/questions/53139884/next-js-disable-server-side-rendering-on-some-pages\n * @type {DynamicComponent<{}>}\n */\nconst DynamicIndexPc = dynamic(\n  import('./index_pc'),\n  {\n    ssr: true,\n    loading: () => <Loading />,\n  },\n);\n\nconst DynamicIndexMobile = dynamic(\n  import('./index_mobile'),\n  {\n    ssr: true,\n    loading: () => <Loading />,\n  },\n);\n\nexport default class Index extends Component {\n  /**\n   * 只有服务端用到的模块放在getInitialProps里，请确保正确的导入了它们，否则会拖慢你的应用速度。\n   * 这个函数只有app.js和pages下的页面组件有，普通组件没有\n   *\n   * @param pathname URL 的 path 部分\n   * @param query URL 的 query 部分，并被解析成对象\n   * @param asPath 显示在浏览器中的实际路径（包含查询部分），为String类型\n   * @param req HTTP 请求对象 (只有服务器端有)\n   * @param res HTTP 返回对象 (只有服务器端有)\n   * @param json PageRes 获取数据响应对象 (只有客户端有)\n   * @param err 渲染过程中的任何错误\n   * @returns {Promise<{securityJson: *, json: *, userAgent: string}>}\n   */\n  static async getInitialProps({ req, res, pathname, query, asPath, jsonPageRes, err }) {\n    const userAgent = req ? req.headers['user-agent'] : navigator.userAgent;\n\n    let pageJson = '';\n    if (req) {\n      const envDev = query.envDev;\n      const type = query.type;\n      const proxyUserName = query.proxyUserName;\n      const proxyPassword = query.proxyPassword;\n      const proxyIp = query.proxyIp;\n      const proxyPort = query.proxyPort;\n      const jsonVersion = query.jsonVersion;\n\n      const HttpProxyAgent = require('http-proxy-agent');\n      const options = {\n        timeout: 3000,\n      };\n\n      if (!envDev) {\n        options.agent = new HttpProxyAgent(`${type}://${proxyUserName}:${proxyPassword}@${proxyIp}:${proxyPort}`);\n      }\n\n      const tempPage = await fetch(`${SystemConfig.preludeJsonPath}/${jsonVersion}/indexConfig.json`, options);\n      pageJson = await tempPage.json();\n    }\n\n    return { userAgent, pageJson };\n  }\n\n  render() {\n    const { isMobile } = this.props;\n    return <DynamicIndexPc {...this.props} />;\n    /**\n     * 相当于merge，和document只能存一\n     * */\n    // return (isMobile ? <DynamicIndexMobile {...this.props} /> : <DynamicIndexPc {...this.props} />);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}